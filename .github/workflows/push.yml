# Performs the following checks on every push
# - Linting
# - Testing
name: 'Push: Linting + Testing'
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  run-linting:
    name: 'Linting'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          python -m pip install --no-cache-dir --upgrade pip
          pip install flake8
      - run: |
          flake8 --max-line-length=127 rootsstyle/.
          flake8 --max-line-length=127 tests/.

  run-tests:
    name: 'Testing'
    needs: run-linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # setup poetry and caching
      - uses: snok/install-poetry@v1
        with:
          version: 1.1.10
          virtualenvs-create: true
          virtualenvs-in-project: true
      - uses: actions/cache@v2.1.3
        id: cached-poetry-dependencies
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: poetry install
        run: |
          poetry config experimental.new-installer false
          poetry install --no-interaction --no-root -vvv

      #Run tests
      - run: |
          source $VENV
          pytest -vvv --cov-report xml --cov=./
      - name: 'upload coverage to Codecov'
        uses: codecov/codecov-action@v2
        if: ${{ matrix.python-version == '3.8' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          fail_ci_if_error: true