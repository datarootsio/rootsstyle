# Performs the following checks on every push
# - Linting
# - Testing
# - Upload report to codecoverage (if main branch)
name: Linting + Testing + Codecov
on:
  push:
    branches:
      - '**'

jobs:
  run-linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - run: |
          echo ${{ github.ref }}
          echo github.head.ref
          echo ${{ github.head.ref }}
          echo github.head_ref
          echo ${{ github.head_ref }}
      - run: |
          python -m pip install --no-cache-dir --upgrade pip
          pip install flake8 black
      - run: black tests/ rootsstyle/
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automated commit of reformatting done by black
      - run: flake8 tests/ rootsstyle/

  run-tests-and-upload-codecov:
    name: Testing
    needs: run-linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # setup poetry and caching
      - uses: snok/install-poetry@v1
        with:
          version: 1.1.10
          virtualenvs-create: true
          virtualenvs-in-project: true
      - uses: actions/cache@v2.1.3
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry config experimental.new-installer false
          poetry install --no-interaction --no-root -vvv
      # run the tests
      - name: run tests
        run: |
          source .venv/bin/activate
          pytest -vvv --cov-report xml --cov=./
      # upload to codecov
      - name: upload coverage to Codecov
        if: github.head_ref == 'main' && ${{ matrix.python-version == '3.8' }}
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          fail_ci_if_error: true